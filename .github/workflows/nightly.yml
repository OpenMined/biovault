name: Nightly Tests

on:
  # TEMPORARILY - Run on PRs to test macOS install
  pull_request:
    branches: [ main ]
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  # Allow manual trigger for testing with per-platform toggles
  workflow_dispatch:
    inputs:
      run_colab_test:
        description: 'Run Colab environment test'
        required: false
        default: true
        type: boolean
      run_linux_test:
        description: 'Run Linux install test (Ubuntu)'
        required: false
        default: true
        type: boolean
      run_macos_test:
        description: 'Run macOS install test'
        required: false
        default: true
        type: boolean
      run_windows_test:
        description: 'Run Windows install test'
        required: false
        default: true
        type: boolean

jobs:
  colab-test:
    name: Setup Test - Colab
    # TEMPORARILY DISABLED - Only testing macOS
    if: false
    # if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.run_colab_test) }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Set up local BuildKit cache only
      - name: Set up Docker cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-colab-${{ hashFiles('tests/docker/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-colab-

      - name: Display environment
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Runner: ${{ runner.os }} / ${{ runner.arch }}"
          echo "Architecture: $(uname -m)"
          echo "Docker version: $(docker --version)"

      # Build with local caching only
      - name: Build Docker image with cache
        uses: docker/build-push-action@v6
        with:
          context: tests/docker
          file: tests/docker/Dockerfile
          tags: biovault-colab-test:latest
          load: true  # Load into local Docker daemon for testing
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          push: false  # Don't push the test image

      # Move cache to avoid growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Run Colab environment test
        run: |
          cd tests/docker
          chmod +x test_colab_install.sh
          # Use the locally built image
          export DOCKER_IMAGE_NAME="biovault-colab-test:latest"
          ./test_colab_install.sh
        env:
          CI: true
          GITHUB_ACTIONS: true
        timeout-minutes: 30

      - name: Report success
        if: success()
        run: |
          echo "✅ Colab environment test passed"

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: colab-test-logs-${{ github.run_id }}
          path: |
            tests/docker/*.log
            /tmp/colab-test-*.log
          retention-days: 7

      - name: Report failure
        if: failure()
        run: |
          echo "❌ Colab environment test failed"
          exit 1

  linux-installation-test:
    name: Setup Test - Ubuntu
    # TEMPORARILY DISABLED - Only testing macOS
    if: false
    # if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.run_linux_test) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install BioVault CLI
        run: |
          cargo install --path cli --force
          echo "Installed bv to: $(which bv)"
          bv --version

      - name: Run Ubuntu installation test
        run: |
          cd tests/os
          chmod +x test_ubuntu_install.sh
          ./test_ubuntu_install.sh
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Ubuntu-test-logs-${{ github.run_id }}
          path: |
            tests/os/*.log
            /tmp/bv-test-*.log
          retention-days: 7

  macos-installation-test:
    name: Setup Test - macOS
    # TEMPORARILY - Always run for PR testing
    if: true
    # if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.run_macos_test) }}
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install BioVault CLI
        run: |
          cargo install --path cli --force
          echo "Installed bv to: $(which bv)"
          bv --version

      - name: Run macOS installation test
        run: |
          cd tests/os
          chmod +x test_macos_install.sh
          ./test_macos_install.sh
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: macOS-test-logs-${{ github.run_id }}
          path: |
            tests/os/*.log
            /tmp/bv-test-*.log
          retention-days: 7

  windows-installation-test:
    name: Setup Test - Windows
    # TEMPORARILY DISABLED - Only testing macOS
    if: false
    # if: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.run_windows_test) }}
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install BioVault CLI
        shell: bash
        run: |
          cargo install --path cli --force
          echo "Installed bv to: $(which bv || where bv)"
          bv --version

      - name: Run Windows installation test
        shell: pwsh
        run: |
          cd tests/os
          ./test_windows_install.ps1
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Windows-test-logs-${{ github.run_id }}
          path: |
            tests\os\*.log
          retention-days: 7

  
